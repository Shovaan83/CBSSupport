@page
@model CBSSupport.API.Pages.ChatModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Client Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />
</head>
<body>

    <div class="dashboard-container">
        <!-- ===== SECTION 1: CONVERSATION LIST ===== -->
        <div id="conversation-list-panel" class="dashboard-panel">
            <div class="panel-header">Conversations</div>
            <div class="panel-body" id="conversation-list-container">
                <a href="#" class="conversation-item active"><div class="avatar-initials avatar-bg-green me-3">S</div><div class="flex-grow-1"><div class="fw-bold">CBS Support</div><small class="text-muted">Agent: Shovan</small></div><div class="icon ms-2"><i class="fas fa-headset"></i></div></a>
                <a href="#" class="conversation-item"><div class="avatar-initials avatar-bg-blue me-3">R</div><div class="flex-grow-1"><div class="fw-bold">Ram Shah</div><small class="text-muted">Can you check on ticket?</small></div><div class="icon ms-2"><i class="fas fa-user-friends"></i></div></a>
            </div>
        </div>

        <!-- ===== SECTION 2: CHAT AREA ===== -->
        <div id="chat-panel" class="dashboard-panel">
            <div class="panel-header" id="chat-header">
                <div id="chat-header-avatar" class="avatar-initials avatar-bg-green">S</div>
                <div id="chat-header-info">
                    <div class="fw-bold" id="chat-partner-name">CBS Support</div>
                    <small class="text-muted" id="chat-partner-status">Agent: Shovan</small>
                </div>
            </div>
            <div id="chat-panel-body" class="panel-body"></div>
            <div class="chat-footer">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Type a message..." id="message-input" disabled>
                    <button class="btn btn-primary" type="button" id="send-button" disabled><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
        </div>

        <!-- ===== SECTION 3: MY HISTORY ===== -->
        <div id="history-column">
            <div class="history-panel">
                <div class="panel-header d-flex justify-content-between align-items-center">
                    <span>My Support Tickets</span>
                    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#newTicketModal"><i class="fas fa-plus me-1"></i> Create New Request</button>
                </div>
                <div class="history-table-container panel-body">
                    <table class="table table-hover table-sm small">
                        <thead><tr><th>ID</th><th>Subject</th><th>Date</th><th>Status</th><th>Created By</th><th>Resolved By</th></tr></thead>
                        <tbody id="my-support-history-table"></tbody>
                    </table>
                </div>
            </div>
            <div class="history-panel">
                <div class="panel-header">My Inquiries</div>
                <div class="history-table-container panel-body">
                    <table class="table table-hover table-sm small">
                        <thead><tr><th>ID</th><th>Topic</th><th>Date</th><th>Outcome</th></tr></thead>
                        <tbody><tr><td>#INQ-345</td><td>Pricing for Enterprise Plan</td><td>2024-09-05</td><td><span class="badge bg-info">Info Sent</span></td></tr></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- ===== MODAL FOR NEW SUPPORT REQUEST ===== -->
    <div class="modal fade" id="newTicketModal" tabindex="-1" aria-labelledby="newTicketModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title" id="newTicketModalLabel">New Support Request</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div>
                <div class="modal-body">
                    <form id="newTicketForm">
                        <div id="submissionSuccessMessage" class="alert alert-success d-none" role="alert">Support Request Submitted Successfully!</div>
                        <div class="row mb-3"><div class="col-md-6"><label for="fullName" class="form-label">Full Name</label><input type="text" class="form-control" id="fullName" required></div><div class="col-md-6"><label for="email" class="form-label">Email</label><input type="email" class="form-control" id="email" required></div></div>
                        <div class="row mb-3"><div class="col-md-6"><label for="accountNumber" class="form-label">Account Number</label><input type="text" class="form-control" id="accountNumber"></div><div class="col-md-6"><label for="title" class="form-label">Title / Subject</label><input type="text" class="form-control" id="title" required></div></div>
                        <div class="mb-3"><label for="topic" class="form-label">Topic</label><select class="form-select" id="topic" required><option selected disabled value="">Choose...</option><option>Account</option><option>Card</option><option>Transaction</option><option>Other</option></select></div>
                        <div class="mb-3"><label for="description" class="form-label">Description</label><textarea class="form-control" id="description" rows="4" required></textarea></div>
                        <div class="mb-3"><label for="priority" class="form-label">Priority</label><select class="form-select" id="priority" required><option>Low</option><option selected>Normal</option><option>High</option><option>Urgent</option></select></div>
                    </form>
                </div>
                <div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button><button type="submit" class="btn btn-primary" form="newTicketForm" id="submitTicketBtn">Submit Request</button></div>
            </div>
        </div>
    </div>

    <!-- ===== JAVASCRIPT LIBRARIES & CUSTOM SCRIPTS ===== -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {

            // --- SECTION 1: REST API & TICKET HISTORY LOGIC ---
            async function fetchTickets() {
                try {
                    const response = await fetch('/api/chat/tickets');
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const tickets = await response.json();
                    populateTicketTable(tickets);
                } catch (error) { console.error("Could not fetch tickets:", error); }
            }

            function populateTicketTable(tickets) {
                const tableBody = document.querySelector("#my-support-history-table");
                tableBody.innerHTML = "";
                tickets.forEach(ticket => addTicketToTable(ticket, false));
            }

            function addTicketToTable(ticket, prepend = true) {
                const tableBody = document.querySelector("#my-support-history-table");
                const newRow = document.createElement('tr');
                let statusBadge = ticket.status.toLowerCase() === 'resolved' ? `<span class="badge bg-success">${ticket.status}</span>` : `<span class="badge bg-warning text-dark">${ticket.status}</span>`;
                newRow.innerHTML = `<td>${ticket.id}</td><td>${ticket.subject}</td><td>${new Date(ticket.date).toLocaleDateString()}</td><td>${statusBadge}</td><td>${ticket.created_By || ''}</td><td>${ticket.resolved_By || ''}</td>`;
                if (prepend) { tableBody.prepend(newRow); } else { tableBody.appendChild(newRow); }
            }

            const newTicketModalElement = document.getElementById('newTicketModal');
            const newTicketModal = new bootstrap.Modal(newTicketModalElement);
            const newTicketForm = document.getElementById('newTicketForm');
            const submitBtn = document.getElementById('submitTicketBtn');
            const successMessageDiv = document.getElementById('submissionSuccessMessage');

            newTicketForm.addEventListener('submit', async function(event) {
                event.preventDefault();
                submitBtn.disabled = true;
                submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...`;
                const requestData = { fullName: document.getElementById('fullName').value, email: document.getElementById('email').value, accountNumber: document.getElementById('accountNumber').value, title: document.getElementById('title').value, topic: document.getElementById('topic').value, description: document.getElementById('description').value, priority: document.getElementById('priority').value };
                try {
                    const response = await fetch('/api/chat/createticket', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestData) });
                    if (!response.ok) throw new Error(`Server responded with status: ${response.status}`);
                    const newTicket = await response.json();
                    addTicketToTable(newTicket, true);
                    successMessageDiv.classList.remove('d-none');
                    setTimeout(() => newTicketModal.hide(), 2500);
                } catch (error) { console.error('Failed to submit support request:', error); alert('There was an error submitting your request. Please try again.'); submitBtn.disabled = false; submitBtn.innerHTML = 'Submit Request'; }
            });

            newTicketModalElement.addEventListener('hidden.bs.modal', () => { newTicketForm.reset(); submitBtn.disabled = false; submitBtn.innerHTML = 'Submit Request'; successMessageDiv.classList.add('d-none'); });

            fetchTickets(); // Initial load of ticket history


            // --- SECTION 2: SIGNALR REAL-TIME CHAT LOGIC ---
            const messageInput = document.getElementById("message-input");
            const sendButton = document.getElementById("send-button");
            const chatBody = document.getElementById("chat-panel-body");

            // In a real app, get this from authentication (e.g., from a Razor variable or a cookie).
            const currentUserName = "Alzeb Guchade";

            const connection = new signalR.HubConnectionBuilder().withUrl("/chathub").configureLogging(signalR.LogLevel.Information).build();

            // Logic to display incoming messages
            connection.on("ReceiveMessage", (senderName, message, timestamp, initials) => {
                const isSentMessage = (senderName === currentUserName);
                const messageRow = document.createElement('div');
                messageRow.classList.add('message-row', isSentMessage ? 'sent' : 'received');
                const avatarColor = isSentMessage ? 'avatar-bg-blue' : 'avatar-bg-green';
                const time = new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                // Sanitize message to prevent HTML injection
                const sanitizedMessage = message.replace(/</g, "<").replace(/>/g, ">");

                messageRow.innerHTML = `
                    <div class="avatar-initials ${avatarColor}">${initials}</div>
                    <div class="message-content">
                        <div class="message-header"><span class="message-sender">${senderName}</span></div>
                        <div class="message-bubble"><p class="message-text">${sanitizedMessage}</p></div>
                        <div class="message-timestamp">${time}</div>
                    </div>`;
                chatBody.appendChild(messageRow);
                chatBody.scrollTop = chatBody.scrollHeight;
            });

            // Logic to send messages
            function sendMessage() {
                const message = messageInput.value;
                if (message && message.trim()) {
                    connection.invoke("SendPublicMessage", currentUserName, message).catch(err => console.error(err.toString()));
                    messageInput.value = "";
                    messageInput.focus();
                }
            }

            sendButton.addEventListener("click", sendMessage);
            messageInput.addEventListener("keypress", function(event) { if (event.key === "Enter") { event.preventDefault(); sendMessage(); } });

            // Start and manage the SignalR connection
            async function startSignalR() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                    sendButton.disabled = false;
                    messageInput.disabled = false;
                    messageInput.focus();
                } catch (err) {
                    console.error("SignalR Connection Failed: ", err);
                    setTimeout(startSignalR, 5000); // Retry connection after 5 seconds
                }
            }

            connection.onclose(async () => {
                console.log("SignalR Disconnected.");
                sendButton.disabled = true;
                messageInput.disabled = true;
                await startSignalR(); // Attempt to reconnect
            });

            startSignalR(); // Start the SignalR connection
        });
    </script>
</body>
</html>